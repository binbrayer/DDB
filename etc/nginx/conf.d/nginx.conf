server {
	listen 80;
	index index.php index.html index.htm;
	server_name webserver;
	error_log  /var/log/nginx/error.log;
	access_log /var/log/nginx/access.log;
	root /var/www;


	location ~ \..*/.*\.php$ {
		return 403;
	}

	location ~ ^/sites/.*/private/ {
		return 403;
	}

	# Block access to "hidden" files and directories whose names begin with a
	# period. This includes directories used by version control systems such
	# as Subversion or Git to store control files.
	location ~ (^|/)\. {
		return 403;
	}

	location / {
		try_files $uri /index.php?$query_string;
	}

	location @rewrite {
		rewrite ^/(.*)$ /index.php?q=$1;
	}

	# In Drupal 8, we must also match new paths where the '.php' appears in the middle,
	# such as update.php/selection. The rule we use is strict, and only allows this pattern
	# with the update.php front controller.  This allows legacy path aliases in the form of
	# blog/index.php/legacy-path to continue to route to Drupal nodes. If you do not have
	# any paths like that, then you might prefer to use a laxer rule, such as:
	#   location ~ \.php(/|$) {
	# The laxer rule will continue to work if Drupal uses this new URL pattern with front
	# controllers other than update.php in a future release.
	location ~ '\.php$|^/update.php' {
		fastcgi_index index.php;
		fastcgi_param PATH_INFO $fastcgi_path_info;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_pass php:9000;
		fastcgi_split_path_info ^(.+?\.php)(|/.*)$;
		include fastcgi_params;
		try_files $uri $uri/ /index.php last;

	}

	# Fighting with Styles? This little gem is amazing.
	# location ~ ^/sites/.*/files/imagecache/ { # For Drupal <= 6
	location ~ ^/sites/.*/files/styles/ { # For Drpal >= 7
		try_files $uri @rewrite;
	   }
	location ~ \.css {
	   add_header  Content-Type	text/css;
    }
    location ~ \.js {
	   add_header  Content-Type	application/x-javascript;
    }
	location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
		expires max;
		log_not_found off;
	}
}
